# -*- coding: utf-8 -*-
"""NIST_Metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O54WOlRS_-H7qBlDWVGJjh2BpMX6tP5A
"""

# clone the git
# !git clone "https://github.com/stevenang/randomness_testsuite.git"
import os
import pandas as pd
from randomness_testsuite.Tools import Tools
from randomness_testsuite.FrequencyTest import FrequencyTest as ft
from randomness_testsuite.RunTest import RunTest as rt
from randomness_testsuite.Matrix import Matrix as mt
from randomness_testsuite.Spectral import SpectralTest as st
from randomness_testsuite.TemplateMatching import TemplateMatching as tm
from randomness_testsuite.Universal import Universal as ut
from randomness_testsuite.Complexity import ComplexityTest as ct
from randomness_testsuite.Serial import Serial as serial
from randomness_testsuite.ApproximateEntropy import ApproximateEntropy as aet
from randomness_testsuite.CumulativeSum import CumulativeSums as cst
from randomness_testsuite.RandomExcursions import RandomExcursions as ret

path = "datasets/"
filename = "email_list_predicted.csv"
email_list = pd.read_csv(path + filename)
email_list['password'] = email_list['password'].astype(str)
email_list['binary_password'] = email_list['password'].apply(lambda x: Tools.string_to_binary(x))

test_type = ['freq_test_monobit', 'freq_test_block', 'run_test', 'longest_one_block_test', 'binary_matrix_rank_text',
             'sepctral_test',
             'non_overlapping_test', 'overlapping_patterns', 'statistical_test', 'linear_complexity_test',
             'serial_test', 'approximate_entropy_test',
             'cumulative_sums_test', 'cumulative_sums_test', 'random_excursions_test', 'variant_test']

test_function = {
    0: ft.monobit_test, 1: ft.block_frequency, 2: rt.run_test, 3: rt.longest_one_block_test,
    4: mt.binary_matrix_rank_text, 5: st.sepctral_test,
    6: tm.non_overlapping_test, 7: tm.overlapping_patterns, 8: ut.statistical_test, 9: ct.linear_complexity_test,
    10: serial.serial_test,
    11: aet.approximate_entropy_test, 12: cst.cumulative_sums_test, 13: cst.cumulative_sums_test,
    14: ret.random_excursions_test, 15: ret.variant_test}

count = 0
for test in test_function:
    email_list[test_type[count % len(test_type)]] = email_list['binary_password'].apply(
        lambda x: test_function[count](x))
    count += 1

email_list.to_csv(path + "NIST_metrics_" + filename)